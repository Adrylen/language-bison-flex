fileTypes: [
	'y',
	'ypp',
	'yy',
	'l',
	'll',
	'lex',
	'flex'
]
name: 'Bison/Flex'
patterns: [
	# Top-level patterns
	{
		match: '//.*'
		name: 'text.comments'
	}
	{
		begin: '(/\\*)'
		end: '(\\*/)'
		name: 'text.comments'
	}
	{
		match: '\'[^\']*\''
		name: 'text.string'
	}
	{
		match: '"[^"]*"'
		name: 'text.string'
	}
	{
		match: '%(start|token|type|union)'
		name: 'keyword.primary'
	}
	{
		match: '%(left|right|empty)'
		name: 'keyword.second'
	}
	# Metadata block
	{
		begin: '(%\\{)'
		beginCaptures:
			1: { name: 'punct.meta.block.start' }
		end: '(%\\})'
		endCaptures:
			1: { name: 'punct.meta.block.end' }
		patterns: [{ include: 'source.c' }]
	}
	# Variables
	{
		begin: '(?<=%\\})'
		end: '(?=%%)'
		patterns: [
			{
				match: '<.*>'
				name: 'text.types'
			}
			{
				match: '^([a-zA-Z]+)\\s+'
				name: 'text.identifier'
			}
			{
				begin: '(\\{)'
				beginCaptures:
					1: { name: 'punct.code.block.start' }
				end: '(\\})\\s*$'
				endCaptures:
					1: { name: 'punct.code.block.end' }
				patterns: [{ include: 'source.c' }]
			}
			{ include: '$self' }
		]
	}
	# Rules and Code
	{
		begin: '(%%)'
		beginCaptures:
			1: { name: 'punct.rules.start' }
		patterns: [
			# Flex rules
			{
				match: '^([\'"][^\'"]*[\'"])\\s*(.*)(;)$'
				captures:
					1: { name: 'text.string' }
					2: { patterns: [{ include: 'source.c' }]}
					3: { name: 'punct.rule.end' }
			}
			{
				begin: '^(\\{)([a-zA-Z]+)(\\})\\s*(\\{)'
				beginCaptures:
					1: { name: 'punct.block.start' }
					2: { name: 'keyword.rule.name' }
					3: { name: 'punct.block.end' }
					4: { name: 'punct.code.block.start' }
				end: '(\\})'
				endCaptures:
					1: { name: 'punct.code.block.end' }
				patterns: [{ include: 'source.c' }]
			}
			{
				begin: '^(.*)\\s+(\\{)'
				beginCaptures:
					1: { name: 'text.identifier.dynamic' }
					2: { name: 'punct.code.block.start' }
				end: '(\\})'
				endCaptures:
					1: { name: 'punct.code.block.end' }
				patterns: [{ include: 'source.c' }]
			}
			# Rule
			{
				begin: '^([a-zA-Z]+)(:)'
				beginCaptures:
					1: { name: 'keyword.rule.name' }
					2: { name: 'punct.rule.start' }
				end: '(;)'
				endCaptures:
					1: { name: 'punct.rule.end' }
				patterns: [
					{
						match: '\\|'
						name: 'punct.rule.next'
					}
					{
						begin: '(\\{)'
						beginCaptures:
							1: { name: 'punct.code.block.start' }
						end: '(\\})'
						endCaptures:
							1: { name: 'punct.code.block.end' }
						patterns: [{ include: 'source.c' }]
					}
					{ include: '$self' }
				]
			}
			# Code
			{
				begin: '^(%%)'
				beginCaptures:
					1: { name: 'punct.code.start' }
				patterns: [{ include: 'source.c' }]
			}
			{ include: '$self' }
		]
	}
]
scopeName: 'source.y'
